import java.io.File

task useCasesUnitTest() {
    group = "Soyle Tasks"
    description = "Run all unit tests in the application layer"

    configure {
        dependsOn(":application:test")
    }
}
task useCasesTest {
    group = "Soyle Tasks"
    description = "Run unit tests and any integration tests in the application layer"

    configure {
        dependsOn(useCasesUnitTest)
    }
}
task adaptersUnitTest {
    group = "Soyle Tasks"
    description = "Run all unit tests in the gui layer"

    configure {
        dependsOn(":gui:test")
    }
}
task adaptersTest {
    group = "Soyle Tasks"
    description = "Run all unit tests and any integration tests in the gui layer"

    configure {
        dependsOn(adaptersUnitTest)
    }
}
task javafxUnitTest {
    group = "Soyle Tasks"
    description = "Run all unit tests in the infrastructure layer"

    configure {
        dependsOn(":infrastructure:test")
    }
}
task javafxTest {
    group = "Soyle Tasks"
    description = "Run all unit tests and any integration tests in the infrastructure layer"

    configure {
        dependsOn(javafxUnitTest)
    }
}
task UATTests {
    group = "Soyle Tasks"
    description = "UAT tests in infrastructure layer"

    configure {
        dependsOn(":infrastructure:cucumber")
    }
}
task fullTest {
    group = "Soyle Tasks"
    description = "Run all tests in all layers and run UAT tests"

    configure {
        dependsOn(useCasesTest, adaptersTest, javafxTest, UATTests)
    }
}
task fullTestReport {
    group = "Soyle Tasks"
    description = "Run all tests in all layers and run UAT tests"

    configure {
        dependsOn(useCasesTest, adaptersTest, javafxTest, ":infrastructure:runFeaturesUsingJUnit")
    }
}
task runInIde {
    group = "Soyle Tasks"
    description = "Start the application in the IDE"

    configure {
        dependsOn(":infrastructure:runShadow")
    }
}
task zipTestReport(type: Zip) {
    group = "Soyle Tasks"
    description = "Create a zip archive of the courgette-report"

    String zipSrc = "courgette-report/"

    archiveFileName = "UAT Report.zip"
    destinationDirectory = project.file("${project.buildDir}")
    from "$zipSrc"

    configure {
        dependsOn(fullTestReport)
    }

    doLast {
        println archiveFileName.get()
        println relativePath(destinationDirectory)
        println relativePath(archiveFile)
    }
}
task buildAndPackage {
    group = "Soyle Tasks"
    description = "Create runtime images for all three platforms"

    configure {
        dependsOn(":infrastructure:runtimeZip")
    }
}


task nightly {
    group = "release"

    githubRelease {

        token project.findProperty("gpr.token").toString()
        owner "soyle-productions"
        tagName "latest"
        releaseName "Nightly Release"
        draft false
        prerelease true
        def versionFilter = { it.isFile() && it.name.contains(project.version) }
        releaseAssets jar.getDestinationDirectory().asFileTree.filter(versionFilter).files

        overwrite true
        client

    }

    configure {
        dependsOn(buildAndPackage, 'githubRelease')
    }

}

task weekly {
    group = "release"

    githubRelease {

        token project.findProperty("gpr.token").toString()
        owner "soyle-productions"
        tagName "snapshot-" + getDate()
        releaseName "Weekly Release"
        draft false
        prerelease true
        def versionFilter = { it.isFile() && it.name.contains(project.version) }
        releaseAssets project(':infrastructure').buildDir.listFiles().findAll  {
            it.name.toLowerCase().endsWith(".zip")
        }.collect()

        overwrite true
        client

    }

    configure {
        dependsOn(fullTestReport, buildAndPackage, 'githubRelease')
    }

}
