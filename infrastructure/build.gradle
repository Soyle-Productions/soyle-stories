import org.openjfx.gradle.JavaFXModule
import org.openjfx.gradle.JavaFXPlatform
import org.openjfx.gradle.JavaFXOptions
import org.apache.tools.ant.filters.*

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.beryx.runtime' version '1.9.1'
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
}

apply from: "$rootDir/$SUBPROJECT_CONFIG"

sourceSets {
    integration {
        kotlin.srcDirs += 'src/integration/kotlin'
        java.srcDirs += 'src/integration/java'
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
    uat {
        kotlin.srcDirs += 'src/uat/kotlin'
        java.srcDirs += 'src/uat/java'
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationRuntime.extendsFrom testImplementation

    integrationCompile.extendsFrom testCompile
    integrationImplementation.extendsFrom testImplementation

    uatRuntime.extendsFrom testImplementation

    uatCompile.extendsFrom testCompile
    uatImplementation.extendsFrom testImplementation

    cucumberRuntime {
        extendsFrom uatImplementation
    }
}

compileIntegrationKotlin {
    kotlinOptions {
        jvmTarget = "$JAVA_VERSION"
    }
}
compileUatKotlin {
    kotlinOptions {
        jvmTarget = "$JAVA_VERSION"
    }
}


javafx {
    version = "14"
    modules = ['javafx.controls', 'javafx.fxml'/*, 'javafx.web', 'javafx.swing'*/]

    
}

def javaFXOptions = convention.findByType(JavaFXOptions.class) ?: convention.findPlugin(JavaFXOptions.class) ?: convention.getByType(JavaFXOptions.class)

dependencies {
    implementation libraries.soyle_stories_core

    implementation project(":application")
    implementation project(":data")
    implementation project(":gui")
    implementation "no.tornado:tornadofx:1.7.19", {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation libraries.coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$KOTLIN_COROUTINES_VERSION"
    implementation "org.controlsfx:controlsfx:11.0.2"
    implementation "no.tornado:tornadofx-controlsfx:0.1"

    implementation "de.jensd:fontawesomefx-commons:11.0"
    implementation "de.jensd:fontawesomefx-controls:11.0"
    implementation "de.jensd:fontawesomefx-fontawesome:4.7.0-11"
    implementation "de.jensd:fontawesomefx-materialicons:2.2.0-11"
    implementation "de.jensd:fontawesomefx-emojione:2.2.7-11"

    uatImplementation 'io.cucumber:cucumber-java8:6.1.1'
    uatImplementation 'io.cucumber:cucumber-junit:6.1.1'

    testImplementation libraries.junit
    testImplementation libraries.junitEngine
    testImplementation libraries.assertj

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'

    testImplementation libraries.reflectionKt

    JavaFXPlatform.values().each { platform ->
        def cfg = configurations.create("javafx_" + platform.classifier)
        JavaFXModule.getJavaFXModules(javaFXOptions.modules).each { m ->
            project.getDependencies().add(cfg.name,
                    String.format("org.openjfx:%s:%s:%s", m.getArtifactName(), javaFXOptions.version, platform.classifier))
        }
    }
}

runtime {
    options.set(["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"])
    modules.set(['java.desktop',
                 'java.logging',
                 'java.prefs',
                 'java.xml',
                 'jdk.unsupported',
                 'java.scripting',
                 'jdk.jfr'])

    targetPlatform("linux", System.getenv("JAVA_HOME"))
    targetPlatform("mac", System.getenv("JAVA_HOME"))
    targetPlatform("win", System.getenv("JAVA_HOME"))
}

application {
    mainClassName = 'com.soyle.stories.soylestories.SoyleStoriesKt'
}

processResources {
    filesMatching("**/*.properties") {
        filter(ReplaceTokens, tokens: ["application.version": project.parent.property("version")], beginToken: '@', endToken: '@')
    }
}

tasks.withType(CreateStartScripts.class).each {script ->
    script.doFirst {
        script.classpath =  files("lib/*")
    }
}

tasks["runtime"].doLast {
    JavaFXPlatform.values().each { platform ->
        def cfg = configurations["javafx_" + platform.classifier]
        cfg.resolvedConfiguration.files.forEach { f ->
            copy {
                from(f)
                into("build/image/soyle-stories-${platform.classifier}/lib")
            }
        }
    }
}

idea {
    module {
        testSourceDirs += file('src/integration/java')
        testSourceDirs += file('src/integration/kotlin')
        scopes.TEST.plus += [configurations.integrationCompile]

        testSourceDirs += file('src/uat/java')
        testSourceDirs += file('src/uat/kotlin')
        scopes.TEST.plus += [configurations.uatCompile]

        settings {
            packagePrefix["src/test/kotlin"] = "com.soyle.stories"
            packagePrefix["src/integration/kotlin"] = "com.soyle.stories"
            packagePrefix["src/uat/kotlin"] = "com.soyle.stories"
        }
    }
}

task integration(type: Test) {
    group "verification"

    useJUnitPlatform()

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    outputs.upToDateWhen { false }
}

task uat(type: Test) {
    group "verification"

    testClassesDirs = sourceSets.uat.output.classesDirs
    classpath = sourceSets.uat.runtimeClasspath

    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output + sourceSets.uat.output
            args = ['--strict', '--plugin', 'pretty', '--tags', 'not @excluded and not @new', '--glue', 'com.soyle.stories', 'src/uat/resources/features']
        }
    }

    outputs.upToDateWhen { false }
}

check.dependsOn uat
integration.mustRunAfter test
uat.mustRunAfter integration