import org.openjfx.gradle.JavaFXModule
import org.openjfx.gradle.JavaFXPlatform
import org.openjfx.gradle.JavaFXOptions
import org.apache.tools.ant.filters.*

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.beryx.runtime' version '1.8.0'
}

apply from: "$rootDir/kotlin-module.gradle"
apply from: "$rootDir/local-repositories.gradle"

repositories {
    jcenter()
}

javafx {
    version = "14"
    modules = ['javafx.controls', 'javafx.fxml'/*, 'javafx.web', 'javafx.swing'*/]
}

def javaFXOptions = convention.findByType(JavaFXOptions.class) ?: convention.findPlugin(JavaFXOptions.class) ?: convention.getByType(JavaFXOptions.class)

dependencies {
    implementation "com.soyle.stories:soyle-stories-core:0.1.0-SNAPSHOT 20w16a"

    implementation project(":application")
    implementation project(":data")
    implementation project(":gui")
    implementation "no.tornado:tornadofx:1.7.19", {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.3.3"

    implementation "de.jensd:fontawesomefx-commons:11.0"
    implementation "de.jensd:fontawesomefx-controls:11.0"
    implementation "de.jensd:fontawesomefx-fontawesome:4.7.0-11"
    implementation "de.jensd:fontawesomefx-materialicons:2.2.0-11"
    implementation "de.jensd:fontawesomefx-emojione:2.2.7-11"

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"

    JavaFXPlatform.values().each { platform ->
        def cfg = configurations.create("javafx_" + platform.classifier)
        JavaFXModule.getJavaFXModules(javaFXOptions.modules).each { m ->
            project.getDependencies().add(cfg.name,
                    String.format("org.openjfx:%s:%s:%s", m.getArtifactName(), javaFXOptions.version, platform.classifier));
        }
    }
}

runtime {
    options.set(["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"])
    modules.set(['java.desktop',
                 'java.logging',
                 'java.prefs',
                 'java.xml',
                 'jdk.unsupported',
                 'java.scripting',
                 'jdk.jfr'])

    targetPlatform("linux", System.getenv("JAVA_HOME"))
    targetPlatform("mac", System.getenv("JAVA_HOME"))
    targetPlatform("win", System.getenv("JAVA_HOME"))
}

application {
    mainClassName = 'com.soyle.stories.soylestories.SoyleStoriesKt'
}

processResources {
    filesMatching("**/*.properties") {
        filter(ReplaceTokens, tokens: ["application.version": project.parent.property("version")], beginToken: '@', endToken: '@')
    }
}

tasks.withType(CreateStartScripts.class).each {script ->
    script.doFirst {
        script.classpath =  files("lib/*")
    }
}

tasks["runtime"].doLast {
    JavaFXPlatform.values().each { platform ->
        def cfg = configurations["javafx_" + platform.classifier]
        cfg.resolvedConfiguration.files.forEach { f ->
            copy {
                from(f)
                into("build/image/soyle-stories-${platform.classifier}/lib")
            }
        }
    }
}